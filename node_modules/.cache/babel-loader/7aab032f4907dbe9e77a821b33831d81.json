{"ast":null,"code":"import _slicedToArray from \"D:\\\\Drum-Machine\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"D:\\\\Drum-Machine\\\\src\\\\components\\\\Drum.jsx\";\nimport React, { useState, useEffect } from \"react\";\nimport drums from \"./drums\";\nimport PowerIcon from '@material-ui/icons/Power';\nimport PowerOffIcon from \"@material-ui/icons/PowerOff\";\n\nfunction Drum() {\n  // declare a state variable drumsound with initial value empty string\n  const _useState = useState(\"\"),\n        _useState2 = _slicedToArray(_useState, 2),\n        drumSound = _useState2[0],\n        setdrumSound = _useState2[1];\n  /* const audioElement = useRef(null);\n  const [audios, setAudios] = useState(\"\"); */\n  // declare a state variable power with initial value false\n\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        power = _useState4[0],\n        setPower = _useState4[1];\n\n  useEffect(() => {\n    // console.log(audioElement.current);\n    console.log(drumSound);\n  }, [drumSound]);\n  useEffect(() => {\n    document.addEventListener(\"keydown\", handleKeyDown);\n    return () => {\n      document.removeEventListener(\"keydown\", handleKeyDown);\n    };\n  }); // useEffect(() => {\n  //     audios.play();\n  // }, [audios]);\n  // declare function handleKeyDown to keydown events\n\n  /*  useEffect(() => {\n    document.addEventListener(\"keydown\", handleKeyDown);\n  }) */\n\n  const handleClick = event => {\n    if (power) {\n      let clickedButton = event.target.id; // event.target.children[0].play()\n\n      setdrumSound(clickedButton);\n      event.target.children[0].play();\n      /* setAudios(event.target.children[0]); */\n\n      /* \n      drums.forEach(elem => {\n        if (elem.name === clickedButton) {\n          let audio = new Audio(elem.src);\n          audio.play();\n          document.getElementById(elem.name).classList.add(\"pressed\");\n          setTimeout(() => {\n            document.getElementById(elem.name).classList.remove(\"pressed\");\n          }, 1000)\n        }\n        return () => clearTimeout();\n      });\n      setdrumSound(clickedButton);\n      } */\n    }\n  };\n\n  const handleKeyDown = event => {\n    if (power) {\n      let pressedKey = event.keyCode;\n      const options = document.getElementsByClassName(\"container\")[0];\n\n      for (let i = 0; i < options.children.length; i++) {\n        if (options.children[i].getAttribute(\"keycode\") == pressedKey) {\n          options.children[i].children[0].play();\n          setdrumSound(options.children[i].id);\n        }\n      }\n      /*  let pressedKey = event.keyCode;\n      console.log(pressedKey)\n      drums.forEach(elem => {\n        if(elem.)\n      }) */\n\n      /*    drums.forEach((elem) => {\n        if (elem.keycode == pressedKey) {\n          let audio = new Audio(elem.src);\n          audio.play();\n          clickedButton = elem.name;\n          document.getElementById(elem.name).classList.add(\"pressed\");\n          setTimeout(() => {\n            document.getElementById(elem.name).classList.remove(\"pressed\");\n          }, 1000);\n        }\n        return () => clearTimeout();\n      });\n      setdrumSound(clickedButton); */\n\n    }\n  };\n\n  const handlePowerOn = () => {\n    setPower(preValue => {\n      return !preValue;\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"wrapper1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"display\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }\n  }, \" \", drumSound, \" \"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"wrapper2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }\n  }, drums.map(elem => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      onClick: handleClick,\n      key: elem.name,\n      id: elem.name,\n      keycode: elem.keycode,\n      className: \"drum\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 15\n      }\n    }, elem.letter, /*#__PURE__*/React.createElement(\"audio\", {\n      id: \"beep\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"source\", {\n      src: elem.src,\n      type: \"audio/mpeg\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 19\n      }\n    })));\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"power\",\n    onClick: handlePowerOn,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 11\n    }\n  }, power ? /*#__PURE__*/React.createElement(PowerIcon, {\n    style: {\n      fontSize: 40,\n      color: \"green\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 17\n    }\n  }) : /*#__PURE__*/React.createElement(PowerOffIcon, {\n    style: {\n      fontSize: 40,\n      color: \"red\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 17\n    }\n  })))));\n}\n\nexport default Drum;","map":{"version":3,"sources":["D:/Drum-Machine/src/components/Drum.jsx"],"names":["React","useState","useEffect","drums","PowerIcon","PowerOffIcon","Drum","drumSound","setdrumSound","power","setPower","console","log","document","addEventListener","handleKeyDown","removeEventListener","handleClick","event","clickedButton","target","id","children","play","pressedKey","keyCode","options","getElementsByClassName","i","length","getAttribute","handlePowerOn","preValue","map","elem","name","keycode","letter","src","fontSize","color"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport drums from \"./drums\";\nimport PowerIcon from '@material-ui/icons/Power';\nimport PowerOffIcon from \"@material-ui/icons/PowerOff\";\n\nfunction Drum() {\n  // declare a state variable drumsound with initial value empty string\n  const [drumSound, setdrumSound] = useState(\"\");\n  /* const audioElement = useRef(null);\n  const [audios, setAudios] = useState(\"\"); */\n\n  // declare a state variable power with initial value false\n  const [power, setPower] = useState(false);\n\n  useEffect(() => {\n    // console.log(audioElement.current);\n    console.log(drumSound);\n  }, [drumSound]);\n\n  useEffect(() => {\n    document.addEventListener(\"keydown\", handleKeyDown);\n\n    return () => {\n      document.removeEventListener(\"keydown\", handleKeyDown);\n    };\n  });\n\n  // useEffect(() => {\n  //     audios.play();\n  // }, [audios]);\n\n  // declare function handleKeyDown to keydown events\n  /*  useEffect(() => {\n    document.addEventListener(\"keydown\", handleKeyDown);\n  }) */ const handleClick = (\n    event\n  ) => {\n    if (power) {\n      let clickedButton = event.target.id;\n      // event.target.children[0].play()\n      setdrumSound(clickedButton);\n      event.target.children[0].play();\n      /* setAudios(event.target.children[0]); */\n\n      /* \n      drums.forEach(elem => {\n        if (elem.name === clickedButton) {\n          let audio = new Audio(elem.src);\n          audio.play();\n          document.getElementById(elem.name).classList.add(\"pressed\");\n          setTimeout(() => {\n            document.getElementById(elem.name).classList.remove(\"pressed\");\n          }, 1000)\n        }\n        return () => clearTimeout();\n      });\n      setdrumSound(clickedButton);\n    } */\n    }\n  };\n\n  const handleKeyDown = (event) => {\n    if (power) {\n      let pressedKey = event.keyCode;\n      const options = document.getElementsByClassName(\"container\")[0];\n      for (let i = 0; i < options.children.length; i++) {\n        if (options.children[i].getAttribute(\"keycode\") == pressedKey) {\n          options.children[i].children[0].play();\n          setdrumSound(options.children[i].id);\n        }\n      }\n\n      /*  let pressedKey = event.keyCode;\n      console.log(pressedKey)\n      drums.forEach(elem => {\n        if(elem.)\n      }) */\n\n      /*    drums.forEach((elem) => {\n        if (elem.keycode == pressedKey) {\n          let audio = new Audio(elem.src);\n          audio.play();\n          clickedButton = elem.name;\n          document.getElementById(elem.name).classList.add(\"pressed\");\n          setTimeout(() => {\n            document.getElementById(elem.name).classList.remove(\"pressed\");\n          }, 1000);\n        }\n        return () => clearTimeout();\n      });\n      setdrumSound(clickedButton); */\n    }\n  };\n\n  const handlePowerOn = () => {\n    setPower((preValue) => {\n      return !preValue;\n    });\n  };\n\n  return (\n    <div className=\"wrapper1\">\n      <div className=\"display\"> {drumSound} </div>\n      <div className=\"wrapper2\">\n        <div className=\"container\">\n          {drums.map((elem) => {\n            return (\n              <div\n                onClick={handleClick}\n                key={elem.name}\n                id={elem.name}\n                keycode={elem.keycode}\n                className=\"drum\"\n              >\n                {elem.letter}\n                <audio id=\"beep\">\n                  <source src={elem.src} type=\"audio/mpeg\" />\n                </audio>\n              </div>\n            );\n          })}\n          <div className=\"power\" onClick={handlePowerOn}>\n              {power ? (\n              \n                <PowerIcon style={{ fontSize: 40, color:\"green\" }} />\n              ) : (\n                <PowerOffIcon style={{ fontSize: 40, color: \"red\" }} />\n              )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Drum;\n"]},"metadata":{},"sourceType":"module"}